[{"key":"AXZiFZgTOKt5Km87lZWn","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/struts/action/TipusDocumentAction.java","project":"CIBERSEG","securityCategory":"auth","vulnerabilityProbability":"HIGH","status":"TO_REVIEW","line":236,"message":"'password' detected in this expression, review this potentially hard-coded credential.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\n\n   Store the credentials in a configuration file that is not pushed to the code repository. \n   Store the credentials in a database. \n   Use the secret management service of you cloud provider. \n   If the a password has been disclosed through the source code: change it. \n\nCompliant Solution\n\nConnection conn = null;\ntry {\n  String uname = getEncryptedUser();\n  String password = getEncryptedPass();\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password);\n\nSee\n\n   OWASP Top 10 2017 Category A2 - Broken Authentication \n   MITRE, CWE-798 - Use of Hard-coded Credentials \n   MITRE, CWE-259 - Use of Hard-coded Password \n   CERT, MSC03-J. - Never hard code sensitive information \n   SANS Top 25 - Porous Defenses \n   Derived from FindSecBugs rule Hard Coded Password \n","cwe":["CWE-798","CWE-259"]},{"key":"AXZiFZgTOKt5Km87lZWo","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/struts/action/TipusDocumentAction.java","project":"CIBERSEG","securityCategory":"auth","vulnerabilityProbability":"HIGH","status":"TO_REVIEW","line":240,"message":"'password' detected in this expression, review this potentially hard-coded credential.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\n\n   Store the credentials in a configuration file that is not pushed to the code repository. \n   Store the credentials in a database. \n   Use the secret management service of you cloud provider. \n   If the a password has been disclosed through the source code: change it. \n\nCompliant Solution\n\nConnection conn = null;\ntry {\n  String uname = getEncryptedUser();\n  String password = getEncryptedPass();\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password);\n\nSee\n\n   OWASP Top 10 2017 Category A2 - Broken Authentication \n   MITRE, CWE-798 - Use of Hard-coded Credentials \n   MITRE, CWE-259 - Use of Hard-coded Password \n   CERT, MSC03-J. - Never hard code sensitive information \n   SANS Top 25 - Porous Defenses \n   Derived from FindSecBugs rule Hard Coded Password \n","cwe":["CWE-798","CWE-259"]},{"key":"AXZiFZgTOKt5Km87lZWp","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/struts/action/TipusDocumentAction.java","project":"CIBERSEG","securityCategory":"auth","vulnerabilityProbability":"HIGH","status":"TO_REVIEW","line":244,"message":"'password' detected in this expression, review this potentially hard-coded credential.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\n\n   Store the credentials in a configuration file that is not pushed to the code repository. \n   Store the credentials in a database. \n   Use the secret management service of you cloud provider. \n   If the a password has been disclosed through the source code: change it. \n\nCompliant Solution\n\nConnection conn = null;\ntry {\n  String uname = getEncryptedUser();\n  String password = getEncryptedPass();\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password);\n\nSee\n\n   OWASP Top 10 2017 Category A2 - Broken Authentication \n   MITRE, CWE-798 - Use of Hard-coded Credentials \n   MITRE, CWE-259 - Use of Hard-coded Password \n   CERT, MSC03-J. - Never hard code sensitive information \n   SANS Top 25 - Porous Defenses \n   Derived from FindSecBugs rule Hard Coded Password \n","cwe":["CWE-798","CWE-259"]},{"key":"AXZiFZphOKt5Km87lZps","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/struts/action/ValisaAction.java","project":"CIBERSEG","securityCategory":"auth","vulnerabilityProbability":"HIGH","status":"TO_REVIEW","line":1961,"message":"'password' detected in this expression, review this potentially hard-coded credential.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\n\n   Store the credentials in a configuration file that is not pushed to the code repository. \n   Store the credentials in a database. \n   Use the secret management service of you cloud provider. \n   If the a password has been disclosed through the source code: change it. \n\nCompliant Solution\n\nConnection conn = null;\ntry {\n  String uname = getEncryptedUser();\n  String password = getEncryptedPass();\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password);\n\nSee\n\n   OWASP Top 10 2017 Category A2 - Broken Authentication \n   MITRE, CWE-798 - Use of Hard-coded Credentials \n   MITRE, CWE-259 - Use of Hard-coded Password \n   CERT, MSC03-J. - Never hard code sensitive information \n   SANS Top 25 - Porous Defenses \n   Derived from FindSecBugs rule Hard Coded Password \n","cwe":["CWE-798","CWE-259"]},{"key":"AXZiFZphOKt5Km87lZpt","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/struts/action/ValisaAction.java","project":"CIBERSEG","securityCategory":"auth","vulnerabilityProbability":"HIGH","status":"TO_REVIEW","line":1965,"message":"'password' detected in this expression, review this potentially hard-coded credential.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\n\n   Store the credentials in a configuration file that is not pushed to the code repository. \n   Store the credentials in a database. \n   Use the secret management service of you cloud provider. \n   If the a password has been disclosed through the source code: change it. \n\nCompliant Solution\n\nConnection conn = null;\ntry {\n  String uname = getEncryptedUser();\n  String password = getEncryptedPass();\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password);\n\nSee\n\n   OWASP Top 10 2017 Category A2 - Broken Authentication \n   MITRE, CWE-798 - Use of Hard-coded Credentials \n   MITRE, CWE-259 - Use of Hard-coded Password \n   CERT, MSC03-J. - Never hard code sensitive information \n   SANS Top 25 - Porous Defenses \n   Derived from FindSecBugs rule Hard Coded Password \n","cwe":["CWE-798","CWE-259"]},{"key":"AXZiFZphOKt5Km87lZpu","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/struts/action/ValisaAction.java","project":"CIBERSEG","securityCategory":"auth","vulnerabilityProbability":"HIGH","status":"TO_REVIEW","line":1969,"message":"'password' detected in this expression, review this potentially hard-coded credential.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\n\n   Store the credentials in a configuration file that is not pushed to the code repository. \n   Store the credentials in a database. \n   Use the secret management service of you cloud provider. \n   If the a password has been disclosed through the source code: change it. \n\nCompliant Solution\n\nConnection conn = null;\ntry {\n  String uname = getEncryptedUser();\n  String password = getEncryptedPass();\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password);\n\nSee\n\n   OWASP Top 10 2017 Category A2 - Broken Authentication \n   MITRE, CWE-798 - Use of Hard-coded Credentials \n   MITRE, CWE-259 - Use of Hard-coded Password \n   CERT, MSC03-J. - Never hard code sensitive information \n   SANS Top 25 - Porous Defenses \n   Derived from FindSecBugs rule Hard Coded Password \n","cwe":["CWE-798","CWE-259"]},{"key":"AXZiFUrKOKt5Km87lX6H","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":301,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUrKOKt5Km87lX6K","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":413,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUrKOKt5Km87lX6P","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":529,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUrKOKt5Km87lX6T","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":566,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUrKOKt5Km87lX6U","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":577,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUrqOKt5Km87lX6b","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-fields.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":168,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFU0VOKt5Km87lX7f","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-searchPanel.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":125,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFU0VOKt5Km87lX7m","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-searchPanel.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":407,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUq_OKt5Km87lX57","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-tabs.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":142,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUzJOKt5Km87lX6w","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-validation.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":113,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUzJOKt5Km87lX6z","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-validation.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":135,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUzJOKt5Km87lX64","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-validation.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":152,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUzJOKt5Km87lX66","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-validation.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":168,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUzJOKt5Km87lX68","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-validation.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":201,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUzJOKt5Km87lX6-","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-validation.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":217,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUzJOKt5Km87lX6_","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-validation.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":295,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUzKOKt5Km87lX7L","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-validation.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":601,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUzKOKt5Km87lX7M","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-validation.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":605,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUzKOKt5Km87lX7N","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-validation.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":613,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUn3OKt5Km87lX5G","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/engine.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":605,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUnFOKt5Km87lX49","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/testsuite.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":359,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFU62OKt5Km87lX8B","component":"CIBERSEG:src/main/webapp/scripts/ajax/json/json.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":116,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVKZOKt5Km87lX83","component":"CIBERSEG:src/main/webapp/scripts/ajax/prototype/prototype-1.3.1.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":166,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVKZOKt5Km87lX84","component":"CIBERSEG:src/main/webapp/scripts/ajax/prototype/prototype-1.3.1.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":355,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVfqOKt5Km87lYGx","component":"CIBERSEG:src/main/webapp/scripts/dojo/dojo.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":96,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVfrOKt5Km87lYG2","component":"CIBERSEG:src/main/webapp/scripts/dojo/dojo.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":455,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVtGOKt5Km87lYKS","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":47,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVtGOKt5Km87lYKU","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":56,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVtGOKt5Km87lYKW","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":65,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVtGOKt5Km87lYKs","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":291,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVtGOKt5Km87lYK-","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":489,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVtGOKt5Km87lYLK","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":603,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVu-OKt5Km87lYLX","component":"CIBERSEG:src/main/webapp/scripts/masks/masks.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":540,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVu-OKt5Km87lYLY","component":"CIBERSEG:src/main/webapp/scripts/masks/masks.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":540,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFURdOKt5Km87lXzL","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":58,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFURdOKt5Km87lXzP","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":81,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFURdOKt5Km87lXzS","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":94,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFURdOKt5Km87lXzg","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":120,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFURdOKt5Km87lXzh","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":121,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFURdOKt5Km87lXzj","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":122,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFURdOKt5Km87lXzk","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":123,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFURdOKt5Km87lXzw","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":174,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFURdOKt5Km87lXzz","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":187,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFURdOKt5Km87lXz5","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":202,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUReOKt5Km87lX0M","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":284,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUReOKt5Km87lX0X","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":327,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUReOKt5Km87lX0c","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":352,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUReOKt5Km87lX0d","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":353,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUReOKt5Km87lX0e","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":353,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFURfOKt5Km87lX0x","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":413,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFURfOKt5Km87lX02","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":424,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFURfOKt5Km87lX05","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":432,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFURnOKt5Km87lX08","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":451,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFURnOKt5Km87lX1B","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":468,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV0OKt5Km87lX1c","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":45,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV0OKt5Km87lX1d","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":51,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX1k","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":82,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX1u","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":119,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX1v","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":121,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX1w","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":122,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX2T","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":220,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX2Z","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":241,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX2a","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":242,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX2b","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":243,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX2i","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":258,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX2l","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":267,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX2o","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":270,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX2z","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":336,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX20","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":337,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX21","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":339,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX22","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":340,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX28","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":373,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX29","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":374,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX2_","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":375,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX3B","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":387,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX3D","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":388,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUV1OKt5Km87lX3E","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":395,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUa6OKt5Km87lX3j","component":"CIBERSEG:src/main/webapp/scripts/menu/menuExpandable.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":108,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUT1OKt5Km87lX1J","component":"CIBERSEG:src/main/webapp/scripts/menu/tabs.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":13,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZfOKt5Km87lYEl","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":62,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZgOKt5Km87lYEz","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":164,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZgOKt5Km87lYE2","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":194,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZgOKt5Km87lYE3","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":195,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZgOKt5Km87lYE4","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":201,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZgOKt5Km87lYE5","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":203,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZgOKt5Km87lYE6","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":205,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZgOKt5Km87lYE9","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":223,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZgOKt5Km87lYE-","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":233,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZgOKt5Km87lYFB","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":240,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZgOKt5Km87lYFC","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":241,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZgOKt5Km87lYFF","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":249,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZgOKt5Km87lYFG","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":249,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZgOKt5Km87lYFH","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":253,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZgOKt5Km87lYFI","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":254,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZgOKt5Km87lYFJ","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":261,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZgOKt5Km87lYFK","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":263,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVZgOKt5Km87lYFL","component":"CIBERSEG:src/main/webapp/scripts/scvv/Llistes.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":265,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVeTOKt5Km87lYGf","component":"CIBERSEG:src/main/webapp/scripts/scvv/MetadadesTipusdoc.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":79,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVeTOKt5Km87lYGo","component":"CIBERSEG:src/main/webapp/scripts/scvv/MetadadesTipusdoc.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":185,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVeTOKt5Km87lYGp","component":"CIBERSEG:src/main/webapp/scripts/scvv/MetadadesTipusdoc.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":207,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVeTOKt5Km87lYGq","component":"CIBERSEG:src/main/webapp/scripts/scvv/MetadadesTipusdoc.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":217,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVeTOKt5Km87lYGr","component":"CIBERSEG:src/main/webapp/scripts/scvv/MetadadesTipusdoc.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":218,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVeTOKt5Km87lYGs","component":"CIBERSEG:src/main/webapp/scripts/scvv/MetadadesTipusdoc.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":218,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVbIOKt5Km87lYGF","component":"CIBERSEG:src/main/webapp/scripts/scvv/ValidacionsExternesTipusdoc.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":74,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVbIOKt5Km87lYGO","component":"CIBERSEG:src/main/webapp/scripts/scvv/ValidacionsExternesTipusdoc.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":189,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVbIOKt5Km87lYGP","component":"CIBERSEG:src/main/webapp/scripts/scvv/ValidacionsExternesTipusdoc.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":225,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVbIOKt5Km87lYGQ","component":"CIBERSEG:src/main/webapp/scripts/scvv/ValidacionsExternesTipusdoc.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":235,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVbIOKt5Km87lYGR","component":"CIBERSEG:src/main/webapp/scripts/scvv/ValidacionsExternesTipusdoc.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":236,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVbIOKt5Km87lYGS","component":"CIBERSEG:src/main/webapp/scripts/scvv/ValidacionsExternesTipusdoc.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":236,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRZOKt5Km87lX99","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":83,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRZOKt5Km87lX9-","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":84,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRZOKt5Km87lX9_","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":85,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRZOKt5Km87lX-A","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":88,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRZOKt5Km87lX-B","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":92,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRZOKt5Km87lX-C","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":95,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRZOKt5Km87lX-D","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":99,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRZOKt5Km87lX-E","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":106,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRZOKt5Km87lX-F","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":107,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRZOKt5Km87lX-I","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":118,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRZOKt5Km87lX-J","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":118,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRZOKt5Km87lX-Z","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":165,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRZOKt5Km87lX-a","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":179,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRaOKt5Km87lX-j","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":242,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRaOKt5Km87lX-k","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":243,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRaOKt5Km87lX-l","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":244,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRaOKt5Km87lX-t","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":281,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRaOKt5Km87lX_W","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":636,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVRaOKt5Km87lX_Z","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptDOM.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":691,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lX_o","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":79,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lX_p","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":80,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lX_q","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":81,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lX_r","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":84,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lX_s","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":88,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lX_t","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":91,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lX_u","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":95,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lX_v","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":102,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lX_w","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":103,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lX_0","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":114,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lX_z","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":114,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lYAC","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":138,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lYAG","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":166,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lYAH","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":180,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lYAQ","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":260,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lYAR","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":261,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lYAS","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":262,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lYAT","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":276,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lYAV","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":277,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lYAW","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":287,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lYAX","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":288,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lYAY","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":294,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lYA3","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":601,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVSnOKt5Km87lYA6","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptIE4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":656,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTcOKt5Km87lYBJ","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":78,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTcOKt5Km87lYBK","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":79,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTcOKt5Km87lYBL","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":80,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTcOKt5Km87lYBM","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":83,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTcOKt5Km87lYBN","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":87,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTcOKt5Km87lYBO","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":90,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTcOKt5Km87lYBP","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":94,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTcOKt5Km87lYBQ","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":101,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTcOKt5Km87lYBR","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":102,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTcOKt5Km87lYBU","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":113,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTcOKt5Km87lYBV","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":113,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTlOKt5Km87lYBm","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":202,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTlOKt5Km87lYBn","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":216,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTlOKt5Km87lYBz","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":280,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTlOKt5Km87lYB1","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":282,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTlOKt5Km87lYB2","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":284,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTlOKt5Km87lYB3","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":285,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTlOKt5Km87lYB4","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":313,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTlOKt5Km87lYB5","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":315,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTlOKt5Km87lYB6","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":317,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTlOKt5Km87lYB8","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":347,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTlOKt5Km87lYB9","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":348,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTlOKt5Km87lYB-","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":349,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTmOKt5Km87lYCE","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":434,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTmOKt5Km87lYCJ","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":559,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTmOKt5Km87lYCM","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":617,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVTmOKt5Km87lYCN","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/HM_ScriptNS4.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":624,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVYOOKt5Km87lYEj","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/datagrid.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":217,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVU8OKt5Km87lYDk","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/javascript.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":1142,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVhDOKt5Km87lYIZ","component":"CIBERSEG:src/main/webapp/scripts/tabuladors.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":132,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVhDOKt5Km87lYIa","component":"CIBERSEG:src/main/webapp/scripts/tabuladors.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":137,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVhDOKt5Km87lYIb","component":"CIBERSEG:src/main/webapp/scripts/tabuladors.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":138,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVhDOKt5Km87lYIc","component":"CIBERSEG:src/main/webapp/scripts/tabuladors.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":142,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFTC7OKt5Km87lXqo","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/advimage/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":72,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFTC7OKt5Km87lXqp","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/advimage/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":77,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFTCZOKt5Km87lXqD","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/advimage/jscripts/functions.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":21,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFTCZOKt5Km87lXqH","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/advimage/jscripts/functions.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":226,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFR-cOKt5Km87lXlL","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/advlink/jscripts/functions.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":135,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFR-cOKt5Km87lXlU","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/advlink/jscripts/functions.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":372,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFTYtOKt5Km87lXsk","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/contextmenu/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":308,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFRuHOKt5Km87lXkq","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/flash/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":99,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFRuIOKt5Km87lXkv","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/flash/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":134,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFTUYOKt5Km87lXrt","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/inlinepopups/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":420,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFTx7OKt5Km87lXuD","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/themes/advanced/editor_template_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":517,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFTx7OKt5Km87lXuE","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/themes/advanced/editor_template_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":519,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFTvDOKt5Km87lXs4","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/themes/advanced/jscripts/about.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":49,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUPTOKt5Km87lXzB","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_popup.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":86,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUPTOKt5Km87lXzC","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_popup.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":94,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUPTOKt5Km87lXzF","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_popup.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":234,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUPTOKt5Km87lXzH","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_popup.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":237,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFYOKt5Km87lXvX","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":386,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFYOKt5Km87lXv1","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":1573,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFYOKt5Km87lXv3","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":1581,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFYOKt5Km87lXv4","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":1581,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFYOKt5Km87lXv5","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":1620,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFYOKt5Km87lXv9","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":1687,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFYOKt5Km87lXv_","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":1768,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXwY","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":2452,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXwa","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":2478,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXwb","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":2491,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXwc","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":2532,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXwd","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":2535,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXwe","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":2538,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXwy","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":3054,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXwz","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":3055,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXw0","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":3060,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXw1","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":3061,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXw8","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":3342,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXxB","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":3693,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXxC","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":3777,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXxD","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":3778,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXxE","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":3784,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXxF","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":3794,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXxG","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":3795,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXxH","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":3802,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXxI","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":3803,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXxJ","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":3819,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXxK","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":3831,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFZOKt5Km87lXxL","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":3847,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFaOKt5Km87lXyN","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":5156,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFaOKt5Km87lXyO","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":5161,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFaOKt5Km87lXyW","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":5226,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFaOKt5Km87lXyX","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":5229,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFaOKt5Km87lXyY","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":5232,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFaOKt5Km87lXya","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":5238,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFaOKt5Km87lXyr","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":5586,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFaOKt5Km87lXys","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":5587,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFaOKt5Km87lXyu","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":5590,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFaOKt5Km87lXyv","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":5591,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFaOKt5Km87lXyx","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":5594,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFaOKt5Km87lXyz","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":5599,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUFaOKt5Km87lXy1","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":5606,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFUBDOKt5Km87lXvD","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/utils/form_utils.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":200,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVl3OKt5Km87lYJh","component":"CIBERSEG:src/main/webapp/scripts/tooltips/dom_tooltip/domLib.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":629,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVl3OKt5Km87lYJk","component":"CIBERSEG:src/main/webapp/scripts/tooltips/dom_tooltip/domLib.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":635,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVjwOKt5Km87lYJX","component":"CIBERSEG:src/main/webapp/scripts/tooltips/dom_tooltip/domTT.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":1040,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVnkOKt5Km87lYJp","component":"CIBERSEG:src/main/webapp/scripts/tooltips/wz_tooltip/wz_tooltip.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":448,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVnkOKt5Km87lYJq","component":"CIBERSEG:src/main/webapp/scripts/tooltips/wz_tooltip/wz_tooltip.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":456,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVhjOKt5Km87lYI1","component":"CIBERSEG:src/main/webapp/scripts/wforms/wforms.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":472,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVhjOKt5Km87lYI6","component":"CIBERSEG:src/main/webapp/scripts/wforms/wforms.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":768,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVhjOKt5Km87lYJD","component":"CIBERSEG:src/main/webapp/scripts/wforms/wforms.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":951,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVhjOKt5Km87lYJE","component":"CIBERSEG:src/main/webapp/scripts/wforms/wforms.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":953,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVhjOKt5Km87lYJF","component":"CIBERSEG:src/main/webapp/scripts/wforms/wforms.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":958,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFVhjOKt5Km87lYJG","component":"CIBERSEG:src/main/webapp/scripts/wforms/wforms.js","project":"CIBERSEG","securityCategory":"rce","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":960,"message":"Make sure that this dynamic injection or execution of code is safe.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a sandboxed environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: Security Managers in java, iframes and same-origin\npolicy for javascript in a web browser).\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\nSee\n\n   OWASP Top 10 2017 Category A1 - Injection \n   MITRE CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') \n","cwe":["CWE-95"]},{"key":"AXZiFaqGOKt5Km87laD3","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/security/utils/StringGenerator.java","project":"CIBERSEG","securityCategory":"weak-cryptography","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":32,"message":"Make sure that using this pseudorandom number generator is safe here.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\n\n   Use a cryptographically strong random number generator (RNG) like \"java.security.SecureRandom\" in place of this PRNG. \n   Use the generated random values only once. \n   You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. \n\nCompliant Solution\n\nSecureRandom random = new SecureRandom(); // Compliant for security-sensitive use cases\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes);\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-338 - Use of Cryptographically Weak Pseudo-Random Number Generator\n  (PRNG) \n   MITRE, CWE-330 - Use of Insufficiently Random Values \n   MITRE, CWE-326 - Inadequate Encryption Strength \n   CERT, MSC02-J. - Generate strong random numbers \n   CERT, MSC30-C. - Do not use the rand() function for generating pseudorandom\n  numbers \n   CERT, MSC50-CPP. - Do not use std::rand() for generating pseudorandom\n  numbers \n   Derived from FindSecBugs rule Predictable Pseudo Random Number\n  Generator \n","cwe":["CWE-338","CWE-330","CWE-326"]},{"key":"AXZiFUn3OKt5Km87lX5F","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/engine.js","project":"CIBERSEG","securityCategory":"weak-cryptography","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":414,"message":"Make sure that using this pseudorandom number generator is safe here.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\n\n   Use a cryptographically strong pseudorandom number generator (CSPRNG) like crypto.getRandomValues(). \n   Use the generated random values only once. \n   You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. \n\nCompliant Solution\n\n// === Client side ===\nconst crypto = window.crypto || window.msCrypto;\nvar array = new Uint32Array(1);\ncrypto.getRandomValues(array); // Compliant for security-sensitive use cases\n\n// === Server side ===\nconst crypto = require('crypto');\nconst buf = crypto.randomBytes(1); // Compliant for security-sensitive use cases\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-338 - Use of Cryptographically Weak Pseudo-Random Number Generator\n  (PRNG) \n   MITRE, CWE-330 - Use of Insufficiently Random Values \n   MITRE, CWE-326 - Inadequate Encryption Strength \n   CERT, MSC02-J. - Generate strong random numbers \n   CERT, MSC30-C. - Do not use the rand() function for generating pseudorandom numbers\n  \n   CERT, MSC50-CPP. - Do not use std::rand() for generating pseudorandom numbers \n   Derived from FindSecBugs rule Predictable Pseudo Random Number\n  Generator \n","cwe":["CWE-338","CWE-330","CWE-326"]},{"key":"AXZiFVKtOKt5Km87lX9F","component":"CIBERSEG:src/main/webapp/scripts/ajax/effects.js","project":"CIBERSEG","securityCategory":"weak-cryptography","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":43,"message":"Make sure that using this pseudorandom number generator is safe here.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\n\n   Use a cryptographically strong pseudorandom number generator (CSPRNG) like crypto.getRandomValues(). \n   Use the generated random values only once. \n   You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. \n\nCompliant Solution\n\n// === Client side ===\nconst crypto = window.crypto || window.msCrypto;\nvar array = new Uint32Array(1);\ncrypto.getRandomValues(array); // Compliant for security-sensitive use cases\n\n// === Server side ===\nconst crypto = require('crypto');\nconst buf = crypto.randomBytes(1); // Compliant for security-sensitive use cases\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-338 - Use of Cryptographically Weak Pseudo-Random Number Generator\n  (PRNG) \n   MITRE, CWE-330 - Use of Insufficiently Random Values \n   MITRE, CWE-326 - Inadequate Encryption Strength \n   CERT, MSC02-J. - Generate strong random numbers \n   CERT, MSC30-C. - Do not use the rand() function for generating pseudorandom numbers\n  \n   CERT, MSC50-CPP. - Do not use std::rand() for generating pseudorandom numbers \n   Derived from FindSecBugs rule Predictable Pseudo Random Number\n  Generator \n","cwe":["CWE-338","CWE-330","CWE-326"]},{"key":"AXZiFVhjOKt5Km87lYJI","component":"CIBERSEG:src/main/webapp/scripts/wforms/wforms.js","project":"CIBERSEG","securityCategory":"weak-cryptography","vulnerabilityProbability":"MEDIUM","status":"TO_REVIEW","line":1002,"message":"Make sure that using this pseudorandom number generator is safe here.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\n\n   Use a cryptographically strong pseudorandom number generator (CSPRNG) like crypto.getRandomValues(). \n   Use the generated random values only once. \n   You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. \n\nCompliant Solution\n\n// === Client side ===\nconst crypto = window.crypto || window.msCrypto;\nvar array = new Uint32Array(1);\ncrypto.getRandomValues(array); // Compliant for security-sensitive use cases\n\n// === Server side ===\nconst crypto = require('crypto');\nconst buf = crypto.randomBytes(1); // Compliant for security-sensitive use cases\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-338 - Use of Cryptographically Weak Pseudo-Random Number Generator\n  (PRNG) \n   MITRE, CWE-330 - Use of Insufficiently Random Values \n   MITRE, CWE-326 - Inadequate Encryption Strength \n   CERT, MSC02-J. - Generate strong random numbers \n   CERT, MSC30-C. - Do not use the rand() function for generating pseudorandom numbers\n  \n   CERT, MSC50-CPP. - Do not use std::rand() for generating pseudorandom numbers \n   Derived from FindSecBugs rule Predictable Pseudo Random Number\n  Generator \n","cwe":["CWE-338","CWE-330","CWE-326"]},{"key":"AXZiFbRpOKt5Km87laOn","component":"CIBERSEG:src/main/java/cat/gencat/excel/services/GenerarPdfExp.java","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":321,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nLoggers should be used (instead of printStackTrace) to print throwables:\n\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n\nEnableWebSecurity\nannotation for SpringFramework with debug to false disable debugging support:\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFbRpOKt5Km87laO5","component":"CIBERSEG:src/main/java/cat/gencat/excel/services/GenerarPdfExp.java","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":578,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nLoggers should be used (instead of printStackTrace) to print throwables:\n\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n\nEnableWebSecurity\nannotation for SpringFramework with debug to false disable debugging support:\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFYaWOKt5Km87lY1Q","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/model/bo/impl/CanviPasswordBOImpl.java","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":85,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nLoggers should be used (instead of printStackTrace) to print throwables:\n\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n\nEnableWebSecurity\nannotation for SpringFramework with debug to false disable debugging support:\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFYkbOKt5Km87lY-C","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/model/bo/impl/UsuariBOImpl.java","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":822,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nLoggers should be used (instead of printStackTrace) to print throwables:\n\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n\nEnableWebSecurity\nannotation for SpringFramework with debug to false disable debugging support:\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFaq-OKt5Km87laEF","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/security/ValisaAuthenticationProvider.java","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":220,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nLoggers should be used (instead of printStackTrace) to print throwables:\n\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n\nEnableWebSecurity\nannotation for SpringFramework with debug to false disable debugging support:\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFaq-OKt5Km87laEI","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/security/ValisaAuthenticationProvider.java","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":277,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nLoggers should be used (instead of printStackTrace) to print throwables:\n\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n\nEnableWebSecurity\nannotation for SpringFramework with debug to false disable debugging support:\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFaq-OKt5Km87laEL","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/security/ValisaAuthenticationProvider.java","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":307,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nLoggers should be used (instead of printStackTrace) to print throwables:\n\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n\nEnableWebSecurity\nannotation for SpringFramework with debug to false disable debugging support:\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFaq-OKt5Km87laEO","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/security/ValisaAuthenticationProvider.java","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":339,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nLoggers should be used (instead of printStackTrace) to print throwables:\n\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n\nEnableWebSecurity\nannotation for SpringFramework with debug to false disable debugging support:\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFaq-OKt5Km87laER","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/security/ValisaAuthenticationProvider.java","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":373,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nLoggers should be used (instead of printStackTrace) to print throwables:\n\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n\nEnableWebSecurity\nannotation for SpringFramework with debug to false disable debugging support:\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFaq-OKt5Km87laET","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/security/ValisaAuthenticationProvider.java","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":420,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nLoggers should be used (instead of printStackTrace) to print throwables:\n\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n\nEnableWebSecurity\nannotation for SpringFramework with debug to false disable debugging support:\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFaq-OKt5Km87laEW","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/security/ValisaAuthenticationProvider.java","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":464,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nLoggers should be used (instead of printStackTrace) to print throwables:\n\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n\nEnableWebSecurity\nannotation for SpringFramework with debug to false disable debugging support:\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFZrQOKt5Km87lZtl","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/struts/excel/InformePerGeneracioXls.java","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":223,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nLoggers should be used (instead of printStackTrace) to print throwables:\n\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n\nEnableWebSecurity\nannotation for SpringFramework with debug to false disable debugging support:\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFatNOKt5Km87laGK","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/webservices/impl/GeoNamesServiceImpl.java","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":47,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nLoggers should be used (instead of printStackTrace) to print throwables:\n\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n\nEnableWebSecurity\nannotation for SpringFramework with debug to false disable debugging support:\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFatNOKt5Km87laGM","component":"CIBERSEG:src/main/java/net/gencat/icass/valisa/webservices/impl/GeoNamesServiceImpl.java","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":51,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nLoggers should be used (instead of printStackTrace) to print throwables:\n\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n\nEnableWebSecurity\nannotation for SpringFramework with debug to false disable debugging support:\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFbTZOKt5Km87laPO","component":"CIBERSEG:src/main/test/net/gencat/icass/valisa/webservices/test/TestRESTfulService.java","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":38,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nLoggers should be used (instead of printStackTrace) to print throwables:\n\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n\nEnableWebSecurity\nannotation for SpringFramework with debug to false disable debugging support:\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFbTZOKt5Km87laPQ","component":"CIBERSEG:src/main/test/net/gencat/icass/valisa/webservices/test/TestRESTfulService.java","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":42,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nLoggers should be used (instead of printStackTrace) to print throwables:\n\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n\nEnableWebSecurity\nannotation for SpringFramework with debug to false disable debugging support:\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUrKOKt5Km87lX5-","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":64,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUrKOKt5Km87lX5_","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":130,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUrKOKt5Km87lX6A","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":145,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUrKOKt5Km87lX6B","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":188,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUrKOKt5Km87lX6C","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":200,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUrKOKt5Km87lX6D","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":222,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUrKOKt5Km87lX6E","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":233,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUrKOKt5Km87lX6F","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":251,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUrKOKt5Km87lX6I","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":400,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUrKOKt5Km87lX6N","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":512,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUrKOKt5Km87lX6Q","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":531,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUrKOKt5Km87lX6R","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":538,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUrKOKt5Km87lX6S","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":543,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUrKOKt5Km87lX6V","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":592,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUrKOKt5Km87lX6W","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":605,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUrKOKt5Km87lX6Y","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":668,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUrKOKt5Km87lX6Z","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-editList.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":685,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFU1kOKt5Km87lX7u","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-pagedSelect.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":132,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFU1kOKt5Km87lX76","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-pagedSelect.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":304,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFU1kOKt5Km87lX8A","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-pagedSelect.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":654,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFU0VOKt5Km87lX7Z","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-searchPanel.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":87,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFU0VOKt5Km87lX7i","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-searchPanel.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":260,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFU0VOKt5Km87lX7l","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-searchPanel.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":327,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFU0VOKt5Km87lX7p","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-searchPanel.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":727,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUq_OKt5Km87lX56","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-tabs.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":136,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUzJOKt5Km87lX65","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-validation.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":162,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUzKOKt5Km87lX7O","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-validation.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":622,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUzKOKt5Km87lX7P","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-validation.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":678,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUzKOKt5Km87lX7S","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-validation.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":732,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUzKOKt5Km87lX7X","component":"CIBERSEG:src/main/webapp/scripts/ajax/ajaxtags/canigo-ajaxtags-validation.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":881,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVFcOKt5Km87lX8M","component":"CIBERSEG:src/main/webapp/scripts/ajax/behaviour/Behaviour.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":68,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFU9EOKt5Km87lX8G","component":"CIBERSEG:src/main/webapp/scripts/ajax/behaviour/canigo-behaviour.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":121,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVLNOKt5Km87lX9i","component":"CIBERSEG:src/main/webapp/scripts/ajax/controls.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":479,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUpaOKt5Km87lX5k","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/deprecated.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":154,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUpaOKt5Km87lX5l","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/deprecated.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":190,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUpaOKt5Km87lX5m","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/deprecated.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":209,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUpaOKt5Km87lX5n","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/deprecated.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":227,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUpaOKt5Km87lX5o","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/deprecated.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":292,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUpaOKt5Km87lX5p","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/deprecated.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":352,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUn3OKt5Km87lX5C","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/engine.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":178,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUn3OKt5Km87lX5D","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/engine.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":181,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUn3OKt5Km87lX5H","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/engine.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":681,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUn3OKt5Km87lX5I","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/engine.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":711,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUn3OKt5Km87lX5J","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/engine.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":722,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUoDOKt5Km87lX5N","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/index.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":3,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUoDOKt5Km87lX5O","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/index.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":4,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUlAOKt5Km87lX4a","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/scvv/MissatgeAction.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":131,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUlAOKt5Km87lX4b","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/scvv/MissatgeAction.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":137,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUlAOKt5Km87lX4c","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/scvv/MissatgeAction.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":139,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUlAOKt5Km87lX4d","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/scvv/MissatgeAction.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":142,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUlAOKt5Km87lX4e","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/scvv/MissatgeAction.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":147,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUlAOKt5Km87lX4h","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/scvv/MissatgeAction.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":164,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUlAOKt5Km87lX4m","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/scvv/MissatgeAction.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":195,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUlAOKt5Km87lX4n","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/scvv/MissatgeAction.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":200,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUlAOKt5Km87lX4o","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/scvv/MissatgeAction.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":202,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUlAOKt5Km87lX4p","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/scvv/MissatgeAction.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":205,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUlAOKt5Km87lX4r","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/scvv/MissatgeAction.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":209,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUlAOKt5Km87lX4v","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/scvv/MissatgeAction.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":222,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUlAOKt5Km87lX40","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/scvv/MissatgeAction.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":237,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUlAOKt5Km87lX43","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/scvv/MissatgeAction.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":259,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUlAOKt5Km87lX44","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/scvv/MissatgeAction.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":265,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUlAOKt5Km87lX45","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/scvv/MissatgeAction.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":288,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUnFOKt5Km87lX4-","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/testsuite.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":398,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUovOKt5Km87lX5P","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/util.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":50,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUovOKt5Km87lX5S","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/util.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":311,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUovOKt5Km87lX5T","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/util.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":456,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUovOKt5Km87lX5V","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/util.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":533,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUovOKt5Km87lX5W","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/util.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":592,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUovOKt5Km87lX5X","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/util.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":597,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUovOKt5Km87lX5Y","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/util.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":699,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUovOKt5Km87lX5Z","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/util.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":705,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUovOKt5Km87lX5c","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/util.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":758,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUovOKt5Km87lX5d","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/util.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":795,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUovOKt5Km87lX5e","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/util.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":801,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUovOKt5Km87lX5f","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/util.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":849,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUovOKt5Km87lX5g","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/util.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":853,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUovOKt5Km87lX5h","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/util.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":930,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUovOKt5Km87lX5i","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/util.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":934,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUowOKt5Km87lX5j","component":"CIBERSEG:src/main/webapp/scripts/ajax/dwr/util.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":971,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUkaOKt5Km87lX4J","component":"CIBERSEG:src/main/webapp/scripts/calendars/dynarch/calendar-setup.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":101,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUkaOKt5Km87lX4M","component":"CIBERSEG:src/main/webapp/scripts/calendars/dynarch/calendar-setup.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":129,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUjkOKt5Km87lX30","component":"CIBERSEG:src/main/webapp/scripts/calendars/dynarch/calendar.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":641,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVgtOKt5Km87lYII","component":"CIBERSEG:src/main/webapp/scripts/dojo/canigo-dirtyFormWarning-tag.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":26,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVgtOKt5Km87lYIL","component":"CIBERSEG:src/main/webapp/scripts/dojo/canigo-dirtyFormWarning-tag.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":48,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYKY","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":100,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYKa","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":121,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYKb","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":131,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYKc","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":141,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYKd","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":150,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYKe","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":160,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYKf","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":170,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYKg","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":177,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYKh","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":189,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYKi","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":198,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYKj","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":205,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYKk","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":217,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYKl","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":226,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYKm","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":234,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYKo","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":253,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYKp","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":262,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYK6","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":424,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVtGOKt5Km87lYLG","component":"CIBERSEG:src/main/webapp/scripts/interface/missatge.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":544,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFURdOKt5Km87lXzJ","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus3.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":58,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUV0OKt5Km87lX1b","component":"CIBERSEG:src/main/webapp/scripts/menu/coolmenus4.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":39,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVeoOKt5Km87lYGu","component":"CIBERSEG:src/main/webapp/scripts/scvv/General.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":61,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVcXOKt5Km87lYGZ","component":"CIBERSEG:src/main/webapp/scripts/scvv/Organitzacions.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":46,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVdvOKt5Km87lYGd","component":"CIBERSEG:src/main/webapp/scripts/scvv/Plantilles.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":50,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVc2OKt5Km87lYGb","component":"CIBERSEG:src/main/webapp/scripts/scvv/ReceptorsMultiples.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":34,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVc2OKt5Km87lYGc","component":"CIBERSEG:src/main/webapp/scripts/scvv/ReceptorsMultiples.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":46,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVb6OKt5Km87lYGY","component":"CIBERSEG:src/main/webapp/scripts/scvv/Utils.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":55,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaUOKt5Km87lYFN","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":30,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaUOKt5Km87lYFO","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":39,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaUOKt5Km87lYFR","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":60,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaUOKt5Km87lYFS","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":64,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaUOKt5Km87lYFW","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":74,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaUOKt5Km87lYFX","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":78,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaUOKt5Km87lYFY","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":82,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaUOKt5Km87lYFc","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":92,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaUOKt5Km87lYFd","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":96,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaUOKt5Km87lYFe","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":100,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaUOKt5Km87lYFf","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":104,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaUOKt5Km87lYFj","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":114,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYFk","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":118,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYFl","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":122,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYFm","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":126,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYFq","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":136,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYFr","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":140,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYFs","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":144,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYFt","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":148,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYFu","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":152,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYFy","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":162,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYFz","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":166,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYF0","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":174,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYF1","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":178,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYF5","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":188,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYF6","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":192,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYF7","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":196,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYF8","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":200,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYF9","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":204,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYF-","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":208,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYGA","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":273,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVaVOKt5Km87lYGB","component":"CIBERSEG:src/main/webapp/scripts/scvv/Valisa.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":285,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVU8OKt5Km87lYCl","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/javascript.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":21,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVU8OKt5Km87lYCo","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/javascript.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":30,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVU8OKt5Km87lYCr","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/javascript.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":44,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVU8OKt5Km87lYCs","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/javascript.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":55,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVU8OKt5Km87lYDh","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/javascript.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":1062,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVU8OKt5Km87lYDi","component":"CIBERSEG:src/main/webapp/scripts/struts-layout/javascript.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":1070,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVpZOKt5Km87lYJ4","component":"CIBERSEG:src/main/webapp/scripts/struts/mainScript.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":115,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVPJOKt5Km87lX9v","component":"CIBERSEG:src/main/webapp/scripts/swap/canigo-options-tag.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":45,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFTSROKt5Km87lXq5","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/_template/editor_plugin.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":21,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFTSROKt5Km87lXq_","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/_template/editor_plugin.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":59,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFTSROKt5Km87lXrA","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/_template/editor_plugin.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":89,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFTSROKt5Km87lXrB","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/_template/editor_plugin.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":96,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFTSROKt5Km87lXrC","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/_template/editor_plugin.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":103,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFTSROKt5Km87lXrD","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/_template/editor_plugin.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":110,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFTTlOKt5Km87lXrF","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/_template/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":34,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFTTlOKt5Km87lXrL","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/_template/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":73,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFTTlOKt5Km87lXrM","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/_template/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":103,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFTTlOKt5Km87lXrN","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/_template/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":110,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFTTlOKt5Km87lXrO","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/_template/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":117,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFTTlOKt5Km87lXrP","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/_template/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":124,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFTCZOKt5Km87lXqJ","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/advimage/jscripts/functions.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":264,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFSxhOKt5Km87lXpb","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/iespell/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":38,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFSxhOKt5Km87lXpd","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/iespell/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":41,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFTILOKt5Km87lXqu","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/save/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":50,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFSsfOKt5Km87lXpT","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/searchreplace/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":117,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFSsfOKt5Km87lXpU","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/searchreplace/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":143,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFSsfOKt5Km87lXpV","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/searchreplace/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":156,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFSsfOKt5Km87lXpX","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/searchreplace/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":166,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFSsfOKt5Km87lXpY","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/searchreplace/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":172,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFSsfOKt5Km87lXpZ","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/searchreplace/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":177,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFSN9OKt5Km87lXoe","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/table/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":888,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFSN9OKt5Km87lXoi","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/table/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":909,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFSN9OKt5Km87lXom","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/table/editor_plugin_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":933,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFSKFOKt5Km87lXmA","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/plugins/table/jscripts/cell.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":69,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFTx6OKt5Km87lXtu","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/themes/advanced/editor_template_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":274,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFTx7OKt5Km87lXuF","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/themes/advanced/editor_template_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":524,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUPTOKt5Km87lXzA","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_popup.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":30,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUPTOKt5Km87lXzG","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_popup.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":235,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUFYOKt5Km87lXvP","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":229,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUFYOKt5Km87lXvV","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":314,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUFYOKt5Km87lXvc","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":537,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUFYOKt5Km87lXvr","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":1349,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUFZOKt5Km87lXw2","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":3168,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUFZOKt5Km87lXw4","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":3195,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUFaOKt5Km87lXyF","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":5090,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUFaOKt5Km87lXyG","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":5095,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUFaOKt5Km87lXyq","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":5581,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFUFaOKt5Km87lXyy","component":"CIBERSEG:src/main/webapp/scripts/textareas/tiny_mce/tiny_mce_src.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":5595,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVPtOKt5Km87lX9w","component":"CIBERSEG:src/main/webapp/scripts/utils/accesskey.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":122,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVQjOKt5Km87lX9x","component":"CIBERSEG:src/main/webapp/scripts/utils/canigo-accesskey.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":124,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]},{"key":"AXZiFVhjOKt5Km87lYI5","component":"CIBERSEG:src/main/webapp/scripts/wforms/wforms.js","project":"CIBERSEG","securityCategory":"insecure-conf","vulnerabilityProbability":"LOW","status":"TO_REVIEW","line":714,"message":"Make sure this debug feature is deactivated before delivering the code in production.","author":"","creationDate":"2020-12-14T16:16:17+0000","updateDate":"2020-12-14T16:16:17+0000","solution":"Recommended Secure Coding Practices\nDo not enable debug features on production servers.\nCompliant Solution\nerrorhandler Express.js middleware used only in development mode:\n\nconst express = require('express');\nconst errorhandler = require('errorhandler');\n\nlet app = express();\n\nif (process.env.NODE_ENV === 'development') {  // Compliant\n  app.use(errorhandler());  // Compliant\n}\n\nSee\n\n   OWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n  \n   MITRE, CWE-489 - Leftover Debug Code \n   MITRE, CWE-215 - Information Exposure Through Debug Information \n","cwe":["CWE-489","CWE-215"]}]